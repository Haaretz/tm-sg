"use strict";(self.webpackChunk_haaretz_a_tm_sg=self.webpackChunk_haaretz_a_tm_sg||[]).push([[7120],{"../../hooks/s-use-focus-within/src/useFocusWithin.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>useFocusWithin_stories});var react=__webpack_require__("../../../node_modules/.pnpm/react@18.0.0-rc.3-next-e7d0053e6-20220325/node_modules/react/index.js"),esm=__webpack_require__("../../../node_modules/.pnpm/@mdx-js+react@1.6.22_react@18.2.0/node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../../node_modules/.pnpm/@storybook+addon-docs@6.5.12_ir3quccc6i62x6qn6jjhyjjiey/node_modules/@storybook/addon-docs/dist/esm/index.js"),__jsx=react.createElement;function MockComponent({disabled}){return __jsx("button",{disabled})}try{StoryDemo.displayName="StoryDemo",StoryDemo.__docgenInfo={description:"",displayName:"StoryDemo",props:{disabled:{defaultValue:null,description:"Disable execution of `onFocus` and `onBlur` events",name:"disabled",required:!1,type:{name:"boolean | undefined"}},onBlur:{defaultValue:null,description:"Handler that is called when focus leaves the target element or one of its\ndescendants, but only if it moves outside the target element.",name:"onBlur",required:!1,type:{name:"((event: FocusEvent<ElementType, Element>) => void) | undefined"}},onFocus:{defaultValue:null,description:"Handler that is called when the target element or a descendant receives\nfocus, but not when focus is moved within the element.",name:"onFocus",required:!1,type:{name:"((event: FocusEvent<ElementType, Element>) => void) | undefined"}},onFocusWithinChange:{defaultValue:null,description:"Handler that is called when the focus within state changes.",name:"onFocusWithinChange",required:!1,type:{name:"((isFocusWithin: boolean) => void) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../../hooks/s-use-focus-within/src/StoryDemo.tsx#StoryDemo"]={docgenInfo:StoryDemo.__docgenInfo,name:"StoryDemo",path:"../../hooks/s-use-focus-within/src/StoryDemo.tsx#StoryDemo"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)("h1",null,"useFocusWithin"),(0,esm.kt)("br",null),(0,esm.kt)(dist_esm.h_,{component:MockComponent,title:"Hooks/useFocusWithin",argTypes:{disabled:{description:"Disable execution of `onFocus` and `onBlur` events",control:!1,table:{type:{summary:"boolean|undefined"},defaultValue:{summary:"undefined"}}},onBlur:{description:"Handler that is called when focus leaves the target element or one of its descendants, but only if it moves outside the target element.<br /><br /> <code>undefined</code>",control:!1,table:{type:{summary:"(event: React.FocusEvent<ElementType>) => void"},defaultValue:{summary:"undefined"}}},onFocus:{description:"Handler that is called when the target element or a descendant receives focus, but not when focus is moved within the element.<br /><br /> <code>undefined</code>",control:!1,table:{type:{summary:"(event: React.FocusEvent<ElementType>) => void"},defaultValue:{summary:"undefined"}}},onFocusWithinChange:{description:"Handler that is called when the focus within state changes.<br /><br /> <code>undefined</code> <code>(isFocusWithin: boolean) => void</code>",control:!1,table:{type:{summary:null},defaultValue:{summary:"undefined"}}}},mdxType:"Meta"}),(0,esm.kt)("h2",null,"Installation"),(0,esm.kt)("p",null,(0,esm.kt)("strong",{parentName:"p"},"Make sure the package you use ",(0,esm.kt)("inlineCode",{parentName:"strong"},"useFocusWithin")," in has\n",(0,esm.kt)("inlineCode",{parentName:"strong"},"@haaretz/s-use-focus-within")," listed in its ",(0,esm.kt)("inlineCode",{parentName:"strong"},"package.json"),"'s ",(0,esm.kt)("inlineCode",{parentName:"strong"},"dependencies"),"\nfield:")),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-js"},'// package.json\n{\n  // ...\n  "dependencies": {\n    "@haaretz/s-use-focus-within": "workspace:*"\n    // ...\n  }\n}\n')),(0,esm.kt)("p",null,"Because internal monorepo packages are wired up using TypeScript's path aliases\nfeature in dev mode, importing ",(0,esm.kt)("inlineCode",{parentName:"p"},"useFocusWithin")," without listing it as a\ndependency will work in dev mode, but will fail in production. There should be a\n",(0,esm.kt)("inlineCode",{parentName:"p"},"import/no-unresolved")," eslint error when trying to import it when it is not\nlisted as a dependency."),(0,esm.kt)("p",null,"You can then import it like this:"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-js"},"import useFocusWithin from '@haaretz/s-use-focus-within';\n")),(0,esm.kt)("h2",null,"Overview"),(0,esm.kt)("p",null,"Reactively check if an element is focused or contains the currently focused\nelement, execute event handlers on ",(0,esm.kt)("inlineCode",{parentName:"p"},"focus")," and or ",(0,esm.kt)("inlineCode",{parentName:"p"},"blur")," only when focus enters\nor leaves the target element (not when it moves between its descendants) by\nattaching the wrapped ",(0,esm.kt)("inlineCode",{parentName:"p"},"onFocus")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"onBlur")," callbacks returned from the hook to\nDOM elements."),(0,esm.kt)("h3",null,"Props"),(0,esm.kt)(dist_esm.$4,{story:"^",mdxType:"ArgsTable"}),(0,esm.kt)("h3",null,"Usage"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-tsx"},"import useFocusWithin from '@haaretz/s-use-focus-within';\n\nfunction MyComponent({ isDisabled }: { isDisabled: boolean }) {\n  const [isFocusInsideWrapper, setIsFocusInsideWrapper] = React.useState(false);\n  const { onBlur, onFocus } = useFocusWithin<HTMLDivElement>({\n    disabled: isDisabled,\n    onBlur: onBlurWithin,\n    onFocus: onFocusWithin,\n    onFocusWithinChange: setIsFocusInsideWrapper,\n  });\n\n  return (\n    <div>\n      <div onBlur={onBlur} onFocus={onFocus}>\n        <button id=\"btn1\">First inner button</button>\n        <button id=\"btn2\">Second inner button</button>\n      </div>\n\n      <button id=\"btn3\">outer button</button>\n\n      <strong>\n        focus is {isFocusInsideWrapper ? 'inside' : 'outside'} the wrapper div.\n      </strong>\n    </div>\n  );\n}\n\nfunction onBlurWithin(evt: React.FocusEvent<HTMLElement>): void {\n  // ... Do something when focus leaves the element\n}\nfunction onFocusWithin(evt: React.FocusEvent<HTMLElement>): void {\n  // ... Do something when focus enters the element\n}\n")),(0,esm.kt)("p",null,"In the above example, with focus in its initial state on the ",(0,esm.kt)("inlineCode",{parentName:"p"},"<body>")," clicking\nthe first or second inner button will move focus to them and inside the wrapper\nelement, and execute the ",(0,esm.kt)("inlineCode",{parentName:"p"},"onFocusWithin")," callback, as well as\n",(0,esm.kt)("inlineCode",{parentName:"p"},"setIsFocusInsideWrapper")," with ",(0,esm.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,esm.kt)("p",null,"Another click, this time on the other inner button, will not execute any of the\ncallbacks, since focus is only moved within the wrapper element."),(0,esm.kt)("p",null,"Clicking on the outer button will move focus outside the wrapper element and\nexecute the ",(0,esm.kt)("inlineCode",{parentName:"p"},"onBlurWithin")," callback, as well as ",(0,esm.kt)("inlineCode",{parentName:"p"},"setIsFocusInsideWrapper")," with\n",(0,esm.kt)("inlineCode",{parentName:"p"},"false"),"."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Hooks/useFocusWithin",component:MockComponent,argTypes:{disabled:{description:"Disable execution of `onFocus` and `onBlur` events",control:!1,table:{type:{summary:"boolean|undefined"},defaultValue:{summary:"undefined"}}},onBlur:{description:"Handler that is called when focus leaves the target element or one of its descendants, but only if it moves outside the target element.<br /><br /> <code>undefined</code>",control:!1,table:{type:{summary:"(event: React.FocusEvent<ElementType>) => void"},defaultValue:{summary:"undefined"}}},onFocus:{description:"Handler that is called when the target element or a descendant receives focus, but not when focus is moved within the element.<br /><br /> <code>undefined</code>",control:!1,table:{type:{summary:"(event: React.FocusEvent<ElementType>) => void"},defaultValue:{summary:"undefined"}}},onFocusWithinChange:{description:"Handler that is called when the focus within state changes.<br /><br /> <code>undefined</code> <code>(isFocusWithin: boolean) => void</code>",control:!1,table:{type:{summary:null},defaultValue:{summary:"undefined"}}}},includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(dist_esm.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,esm.kt)(MDXContent,null))};const useFocusWithin_stories=componentMeta,__namedExportsOrder=["__page"]}}]);